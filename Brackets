Question:

A string S consisting of N characters is considered to be properly nested if any of the following conditions is true:

S is empty;
S has the form "(U)" or "[U]" or "{U}" where U is a properly nested string;
S has the form "VW" where V and W are properly nested strings.
For example, the string "{[()()]}" is properly nested but "([)()]" is not.

Write a function:

class Solution { public int solution(String S); }

that, given a string S consisting of N characters, returns 1 if S is properly nested and 0 otherwise.

For example, given S = "{[()()]}", the function should return 1 and given S = "([)()]", the function should return 0, as explained above.

Solution:


 import java.util.*;



class Solution {
    public int solution(String S) {
        
        
        Stack<Character> left = new Stack<Character>();

        
        for (int i = 0; i < S.length(); i++) {
            char c = S.charAt(i);
            if (c == '{' || c == '[' || c == '(') {
                left.push(c);
            } else {

                
                if (left.empty()) return 0; 
                switch (left.pop()) {
                    case '{': if (c != '}') return 0; break;
                    case '(': if (c != ')') return 0; break;
                    case '[': if (c != ']') return 0; break;
                }
            }
        }
        if (left.empty()) return 1;
        return 0;
    }
}

Time Complexity: O(N)
