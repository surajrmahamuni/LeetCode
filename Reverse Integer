Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
 
 
 Solution:
 
 class Solution {
    public int reverse(int x) {
        
        int reverse = 0;
        
        while(x != 0)
        {
            int pop = x % 10;
            x /= 10;
            
            //Condition 1
            if(reverse > Integer.MAX_VALUE/10 || (reverse == Integer.MAX_VALUE/10 && pop >7))
                return 0;
            
            //Condition 2
            if(reverse < Integer.MIN_VALUE/10 || (reverse == Integer.MIN_VALUE && pop < -8))
                return 0;
            
            // If both conditions not met
            reverse = reverse * 10 + pop;
            
        }
        
        return reverse;
    }
}


Time Complexity: O(log x)     log x ---> number of digits in x
Space Complexity: O(1)
