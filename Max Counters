Question:

You are given N counters, initially set to 0, and you have two possible operations on them:

increase(X) − counter X is increased by 1,
max counter − all counters are set to the maximum value of any counter.
A non-empty array A of M integers is given. This array represents consecutive operations:

if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X),
if A[K] = N + 1 then operation K is max counter.
For example, given integer N = 5 and array A such that:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the values of the counters after each consecutive operation will be:

    (0, 0, 1, 0, 0)
    (0, 0, 1, 1, 0)
    (0, 0, 1, 2, 0)
    (2, 2, 2, 2, 2)
    (3, 2, 2, 2, 2)
    (3, 2, 2, 3, 2)
    (3, 2, 2, 4, 2)
The goal is to calculate the value of every counter after all operations.



Hint: https://www.youtube.com/watch?v=LBfyoSCcfVw


Solution:


class Solution {
    public int[] solution(int N, int[] A) {
        int maxValue = 0;
        int minValue = 0;

        //Create a counters array
        int[] counters = new int[N];

        //Check Every Operation
        for(int i=0; i<A.length; i++)
        {
            int operation = A[i];
            
            //If Operation is Max_Counter 
            if(operation == N+1)
            {
                //Easy logic but increases Time complexity
                // for(int j=0; j<counters.length;j++)
                // {
                //     counters[j] = maxValue;
                // }
                
                minValue = maxValue;

            }

            //If Operation is Increase
            else
            {
                operation--;
                counters[operation] = Math.max(counters[operation]+1, minValue+1);
                maxValue = Math.max(maxValue, counters[operation]);
            }
           
        }

        //Set remaining values to min value
           for(int i=0; i<counters.length; i++)
           {
                counters[i] = Math.max(counters[i], minValue);        
           }
        return counters;
    }
}

Time Complexity: O(N+M)
