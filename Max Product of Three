Question:

A non-empty array A consisting of N integers is given. The product of triplet (P, Q, R) equates to A[P] * A[Q] * A[R] (0 ≤ P < Q < R < N).

For example, array A such that:

  A[0] = -3
  A[1] = 1
  A[2] = 2
  A[3] = -2
  A[4] = 5
  A[5] = 6
contains the following example triplets:

(0, 1, 2), product is −3 * 1 * 2 = −6
(1, 2, 4), product is 1 * 2 * 5 = 10
(2, 4, 5), product is 2 * 5 * 6 = 60
the function should return 60, as the product of triplet (2, 4, 5) is maximal.
Your goal is to find the maximal product of any triplet.


Solution:


import java.util.*;
class Solution {
    public int solution(int[] A) {
        
        Arrays.sort(A);
        
        int len = A.length;
        
        return A[len - 1] * A[len - 2] * A[len - 3] > A[0] * A[1] * A[len - 1]? A[len - 1] * A[len - 2] * A[len - 3]: A[0] * A[1] * A[len - 1];

    }
}


Time Complexity: O(N log(N))
