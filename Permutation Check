A non-empty array A consisting of N integers is given.

A permutation is a sequence containing each element from 1 to N once, and only once.

For example, array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
is a permutation, but array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
is not a permutation, because value 2 is missing.

The goal is to check whether array A is a permutation.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A, returns 1 if array A is a permutation and 0 if it is not.

For example, given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
    A[3] = 2
the function should return 1.

Given array A such that:

    A[0] = 4
    A[1] = 1
    A[2] = 3
the function should return 0.


Solution:


import java.util.Set;
import java.util.HashSet;
class Solution {
    public int solution(int[] A) {
        
        
        int maxNumber = A.length;

        //Create HashSet that conatins all the elements ranging from 1-N
        Set s = new HashSet();
       
        //Create new HashSet that contains all the elements of array A
        Set s1 = new HashSet();
        
        for(int i =0; i<A.length; i++)
        {
            s1.add(A[i]);
            s.add(i+1);
        }

        // check if s1 has all the elements in s.
        if(s1.containsAll(s))
            return 1;
        else
            return 0;
    }
    
}

Time Complexity: O(n)
