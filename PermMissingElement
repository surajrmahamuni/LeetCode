An array A consisting of N different integers is given. The array contains integers in the range [1..(N + 1)], which means that exactly one element is missing.

Your goal is to find that missing element.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A, returns the value of the missing element.

For example, given array A such that:

  A[0] = 2
  A[1] = 3
  A[2] = 1
  A[3] = 5
the function should return 4, as it is the missing element.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [0..100,000];
the elements of A are all distinct;
each element of array A is an integer within the range [1..(N + 1)].


Solution:

import java.util.Set;
import java.util.HashSet;

class Solution {
    public int solution(int[] A) {
        
        int maxNumber = A.length + 1;

        //Convert array to set, so checking becomes easy 

        Set set = new HashSet();

        //Put all the elements from array to hashset
        for(int i=0; i<A.length; i++)
        {
            set.add(A[i]);
        }

        //Check if set has all the elments from the array
        for(int i=1; i<maxNumber+1; i++)
        {
            if(!set.contains(i))
            {
                return i;
            }
        } 

        throw new RuntimeException("Should not reach here");

    }
}

Time Complexity: O(n)
