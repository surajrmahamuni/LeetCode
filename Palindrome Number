Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.

 

Example 1:

Input: x = 121
Output: true
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
Example 4:

Input: x = -101
Output: false
 

Constraints:

-231 <= x <= 231 - 1



Solution: 


class Solution {
    public boolean isPalindrome(int x) {
        
        // Edge cases
        // Number should not be less than 0
        // last digit of number should not be 0
        // All single digit numbers are palindromes
        if(x < 0 || (x % 10 == 0 && x != 0))
        {
            return false;
        }
        
        //Logic
        int revertedNumber = 0;
        
        while(x > revertedNumber)
        {
            revertedNumber = (revertedNumber * 10) + (x % 10);
            x /= 10;
        }
        
        // we are only finding half of the revese number and comparing it with first half
        // if number has odd digits then reverse number will have one more digit 
        // than original half (121 --> 1 and 12) so eliminate it by revertedNumber/10.
        return x == revertedNumber || x == revertedNumber / 10;
        
        
        
    }
}


Time Complexity : O(log n)     log n --> represents number of digits in x
Space Complexity : O(1)
