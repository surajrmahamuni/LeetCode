Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].


Solution 1: Brute Force

class Solution
{
  public int[] sum(int[] nums, int target)
  {
            for(int i = 0; i < nums.length; i++)
            {
              for(int j = 0; j < nums.length; j++)
              {
                if(nums[i] + nums[j] == target)
                {
                    return new int[] {i, j};
                }
              }
            }
        
        return null;
    }
  }
}

Time Complexity : O(n^2)
Space Complexity : O(n)




Solution 2: One pass 
While we are iterating and inserting elements into Hashtable, we can slos look back and chwck if the current elements complement already exist in the Hashtable. 
If it does exist , we have found a solution and return the indices.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        // Create a HashMap
        Map<Integer, Integer> map = new HashMap<> ();
        
        // Logic
        for(int i = 0; i < nums.length; i++)
        {
            
            int complement = target - nums[i];
            
            if(map.containsKey(complement))
            {
                return new int[] {i, map.get(complement)};
            }
            
            //Otherwise add the nums[i] in HashMap
            map.put(nums[i], i);
        }
        
        return null;
    }
}

Time Complexity : O(n)
Space Complexity : O(n)
